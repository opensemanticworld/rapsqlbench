# Begin: Prerequisites
- hosts: all
  gather_facts: false
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Verify SSH connection
      ansible.builtin.wait_for_connection:
      
    - name: Cloud-init done
      ansible.builtin.raw:  while [ ! -f /var/lib/cloud/instance/boot-finished]; do sleep 10s; done
      changed_when: false

    - name: Check if Python 3 symlink exists
      ansible.builtin.stat:
        path: /usr/bin/python
      register: python_symlink

    - name: Create Python 3 symlink if not exists
      ansible.builtin.raw: ln -s /usr/bin/python3 /usr/bin/python
      when: not python_symlink.stat.exists
# End: Prerequisites


# Begin: Provide Software
- hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Install initial packages
      ansible.builtin.apt:
        name:
          - dirmngr 
          - ca-certificates 
          - software-properties-common 
          - apt-transport-https 
          - lsb-release 
          - curl
        state: present
        update_cache: yes

    - name: Check if PostgreSQL 15 is installed
      ansible.builtin.stat:
        path: /usr/lib/postgresql/15/bin/postgres
      register: pg_15

    - name: Import PostgreSQL 15 APT Repository 
      ansible.builtin.shell:
        cmd: curl -fSsL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /usr/share/keyrings/postgresql.gpg > /dev/null
      when: not pg_15.stat.exists

    - name: Import PostgreSQL 15 stable APT repository
      ansible.builtin.shell:
        cmd: echo deb [arch=amd64,arm64,ppc64el signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main | sudo tee /etc/apt/sources.list.d/postgresql.list
      when: not pg_15.stat.exists

    - name: Install PostgreSQL 15
      ansible.builtin.apt:
        name:
          - postgresql-15
          - postgresql-client-15
          # - postgresql-contrib-15
        state: present
        update_cache: yes

    - name: Install required packages for Apache AGE
      ansible.builtin.apt:
        name:
          - build-essential
          - libreadline-dev
          - zlib1g-dev
          - flex
          - bison
        state: present
        update_cache: yes

    - name: Install necessary headers and libraries for PostgreSQL 15
      ansible.builtin.apt:
        name:
          - postgresql-server-dev-15
        state: present
        update_cache: yes

    - name: Clone Apache AGE repository from branch release/PG15/1.5.0
      ansible.builtin.git:
        repo: https://github.com/apache/age.git
        dest: /tmp/age
        version: release/PG15/1.5.0

    - name: Check if Apache AGE is installed
      ansible.builtin.stat:
        path: /usr/share/postgresql/15/extension/age.control
      register: age

    - name: Install Apache AGE 
      ansible.builtin.shell: make install
      args:
        chdir: /tmp/age
      when: not age.stat.exists



# POSTGRES CONFIGURATION
    - name: Set `max_connections` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_connections'
        line: 'max_connections = {{ max_connections | default("100") }}'
        state: present

    - name: Set `shared_buffers` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?shared_buffers'
        line: 'shared_buffers = {{ shared_buffers | default("128MB") }}'
        state: present

    - name: Set `work_mem` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?work_mem'
        line: 'work_mem = {{ work_mem | default("4MB") }}'
        state: present

    - name: Set `effective_cache_size` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?effective_cache_size'
        line: 'effective_cache_size = {{ effective_cache_size | default("4GB") }}'
        state: present
    
    - name: Set `maintenance_work_mem`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?maintenance_work_mem'
        line: 'maintenance_work_mem = {{ maintenance_work_mem | default("64MB") }}'
        state: present
    
    # - name: Set `checkpoint_completion_target`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?checkpoint_completion_target'
    #     line: 'checkpoint_completion_target = {{ checkpoint_completion_target | default("0.9") }}'
    #     state: present
    
    # - name: Set `wal_buffers`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?wal_buffers'
    #     # -1 = based on shared_buffers
    #     line: 'wal_buffers = {{ wal_buffers | default("-1") }}' 
    #     state: present
    
    # - name: Set `default_statistics_target`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?default_statistics_target'
    #     line: 'default_statistics_target = {{ default_statistics_target | default("100") }}'
    #     state: present
    
    # - name: Set `random_page_cost`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?random_page_cost'
    #     line: 'random_page_cost = {{ random_page_cost | default("4.0") }}'
    #     state: present

    # - name: Set `effective_io_concurrency`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?effective_io_concurrency'
    #     line: 'effective_io_concurrency = {{ effective_io_concurrency | default("1") }}'
    #     state: present
    
    # - name: Set `huge_pages`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?huge_pages'
    #     line: 'huge_pages = {{ huge_pages | default("try") }}'
    #     state: present

    # - name: Set `min_wal_size`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?min_wal_size'
    #     line: 'min_wal_size = {{ min_wal_size | default("80MB") }}'
    #     state: present
    
    # - name: Set `max_wal_size`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?max_wal_size'
    #     line: 'max_wal_size = {{ max_wal_size | default("1GB") }}'
    #     state: present

    # - name: Set `max_worker_processes`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?max_worker_processes'
    #     line: 'max_worker_processes = {{ max_worker_processes | default("4") }}'
    #     state: present
    
    # - name: Set `max_parallel_workers_per_gather`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?max_parallel_workers_per_gather'
    #     line: 'max_parallel_workers_per_gather = {{ max_parallel_workers_per_gather | default("2") }}'
    #     state: present

    # - name: Set `max_parallel_workers`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?max_parallel_workers'
    #     line: 'max_parallel_workers = {{ max_parallel_workers | default("8") }}'
    #     state: present

    # - name: Set `max_parallel_maintenance_workers`
    #   lineinfile:
    #     path: /etc/postgresql/15/main/postgresql.conf
    #     regex: '^#?max_parallel_maintenance_workers'
    #     line: 'max_parallel_maintenance_workers = {{ max_parallel_maintenance_workers | default("2") }}'
    #     state: present




    - name: Restart Service Postgres
      ansible.builtin.service:
        name: postgresql
        state: restarted


    - name: wait for postgresql to restart
      ansible.builtin.wait_for:
        port: 5432
        delay: 5
        timeout: 300

    - name: Install openjdk-11-jre-headless
      ansible.builtin.apt:
        name: openjdk-11-jre-headless
        state: present
        update_cache: yes

    # deprecated warning is a bug
    # https://github.com/ansible-collections/ansible.posix/issues/468
    - name: Synchronization benchmark of rapsqlbench to remote
      ansible.posix.synchronize:
        src: ../benchmark
        dest: /tmp




    # - name: Set permissions for synchronized files
    #   ansible.builtin.file:
    #     path: /tmp/benchmark  
    #     mode: "ugo+rwx"       
    #     recurse: yes      

    # - name: Elevate user `postgres` to sudo
    #   ansible.builtin.shell: usermod -aG sudo postgres




# - hosts: all
#   user: ubuntu
#   become: yes
#   become_user: root
#   tasks:

#     # REQUIRES PSYCOPG2!
#     - name: Configure PostgreSQL `shared_buffers`
#       community.postgresql.postgresql_set:
#         name: shared_buffers
#         value: 10GB
#       register: set

#     - name: Show PostgreSQL `shared_buffers` configuration
#       ansible.builtin.debug:
#         msg: "{{ set.name }} {{ set.prev_val_pretty }} >> {{ set.value_pretty }} restart_req: {{ set.restart_required }}"
#       when: set.changed


    - name: Perform RAPSQLBench 
      ansible.builtin.shell: 
        cmd: ./rapsqlbench.sh -g sp50k6 -t 50000 -m 250000 -c 32 -i 1
        chdir: /tmp/benchmark    











    # - name: Synchronization rapsql-docker of rapsqlbench to remote
    #   ansible.posix.synchronize:
    #     src: ../rapsql-docker
    #     dest: /mnt

    # - name: Install required packages ca-certificates, curl, gnupg
    #   apt:
    #     name:
    #       - ca-certificates
    #       - curl
    #       - gnupg
    #     state: present

    # - name: Check if Docker's official GPG key exists
    #   ansible.builtin.stat:
    #     path: /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg
    #   register: gpg_check

    # - name: Add Docker's official GPG key
    #   shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg
    #   when: not gpg_check.stat.exists

    # - name: Add Docker repository
    #   apt_repository:
    #     repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    #     state: present
    #   when: not gpg_check.stat.exists

    # - name: Install Docker packages
    #   apt:
    #     name:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io
    #       - docker-buildx-plugin
    #       - docker-compose
    #     update_cache: yes

    # - name: Add user to the 'docker' group
    #   user:
    #     name: ubuntu
    #     groups: docker
    #   tags: docker

# # Begin: Change Docker Storage Location
# - hosts: all
#   user: ubuntu
#   become: yes
#   become_user: root
#   tasks:
#     # check if the new docker storage location exists
#     - name: Check if desired docker storage location exists
#       ansible.builtin.stat:
#         path: /mnt/docker/
#       register: dir_check
#       tags: docker

#     - name: Create docker storage location if not exists
#       ansible.builtin.file:
#         path: /mnt/docker
#         state: directory
#       tags: docker
#         # mode: '0755'

#     - name: Stop docker service
#       ansible.builtin.systemd:
#         state: stopped
#         name: docker
#       tags: docker
#       when: not dir_check.stat.exists

#     - name: Copy docker data to new location
#       ansible.builtin.shell: rsync -aP /var/lib/docker/ /mnt/docker
#       tags: docker
#       when: not dir_check.stat.exists

#     - name: Change docker storage location
#       ansible.builtin.lineinfile:
#         path: /lib/systemd/system/docker.service
#         regexp: '^ExecStart='
#         line: ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --data-root /mnt/docker
#       tags: docker
#       when: not dir_check.stat.exists

#     - name: Start docker with reloaded daemon
#       ansible.builtin.systemd:
#         daemon_reload: true
#         state: started
#         name: docker
#       tags: docker
#       when: not dir_check.stat.exists
# # End: Change Docker Storage Location


# # Start: Perform rapsql benchmark
# - hosts: all
#   user: ubuntu
#   become: yes
#   become_user: root
#   tasks:
#     - name: Deploy rapsql database
#       community.docker.docker_compose:
#         project_src: /mnt/rapsql-docker 
#         project_name: rapsqlbench
#         build: no
#         pull: yes
#       register: rapsqldb

#     # - name: Show rapsqldb results
#     #   ansible.builtin.debug:
#     #     var: rapsqldb
    
#     - name: Verify rapsqldb is running
#       ansible.builtin.assert:
#         that: 
#           - "rapsqldb.services.rapsql.rapsqlcontainer.state.running"

    # - name: Perform rapsql benchmark by input triple value
    #   community.docker.docker_container_exec:
    #     container: rapsqlcontainer
    #     command: /bin/bash spx2.sh {{ triples }}
    #     chdir: /mnt
    #   register: rapsqlbench
      
    # - name: Show rapsqlbench results
    #   ansible.builtin.debug:
    #     var: rapsqlbench
# End: Perform rapsql benchmark


# # Start: Fetch Results
# - hosts: all
#   user: ubuntu
#   become: yes
#   become_user: root
#   tasks:
#     - name: Synchronize measurement from remote
#       ansible.posix.synchronize:
#         src: /mnt/benchmark/measurement/
#         dest: ../results/aws/measurement
#         mode: pull
#         delete: no

#     - name: Synchronize data from remote
#       ansible.posix.synchronize:
#         src: /mnt/benchmark/data/
#         dest: ../results/aws/data
#         mode: pull
#         delete: no
# # End: Fetch Results
