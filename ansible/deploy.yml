# Begin: Prerequisites
- name: PREREQUISITES
  hosts: all
  gather_facts: false
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Verify SSH connection
      ansible.builtin.wait_for_connection:
      
    - name: Cloud-init done
      ansible.builtin.raw:  while [ ! -f /var/lib/cloud/instance/boot-finished]; do sleep 10s; done
      changed_when: false

    - name: Check if Python 3 symlink exists
      ansible.builtin.stat:
        path: /usr/bin/python
      register: python_symlink

    - name: Create Python 3 symlink if not exists
      ansible.builtin.raw: ln -s /usr/bin/python3 /usr/bin/python
      when: not python_symlink.stat.exists
# End: Prerequisites


# Begin: Provide Software
- name:  PROVIDE SOFTWARE
  hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    # Will be later copied to measurement dir of graphname after benchmark
    - name: Synchronize `config.yml` file of ansible dir to remote `tmp` dir
      ansible.posix.synchronize:
        src: ../config.yml
        dest: /tmp

    # deprecated warning is a bug
    # https://github.com/ansible-collections/ansible.posix/issues/468
    - name: Synchronize `benchmark` dir of rapsqlbench to remote `tmp` dir
      ansible.posix.synchronize:
        src: ../benchmark
        dest: /tmp

    - name: Install initial packages
      ansible.builtin.apt:
        name:
          - dirmngr 
          - ca-certificates 
          - software-properties-common 
          - apt-transport-https 
          - lsb-release 
          - curl
        state: present
        update_cache: yes

    - name: Check if PostgreSQL 15 is installed
      ansible.builtin.stat:
        path: /usr/lib/postgresql/15/bin/postgres
      register: pg_15

    - name: Import PostgreSQL 15 APT Repository 
      ansible.builtin.shell:
        cmd: curl -fSsL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /usr/share/keyrings/postgresql.gpg > /dev/null
      when: not pg_15.stat.exists

    - name: Import PostgreSQL 15 stable APT repository
      ansible.builtin.shell:
        cmd: echo deb [arch=amd64,arm64,ppc64el signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main | sudo tee /etc/apt/sources.list.d/postgresql.list
      when: not pg_15.stat.exists

    - name: Install PostgreSQL {{ postgres_apt_version }}
      ansible.builtin.apt:
        name:
          - postgresql-{{ postgres_apt_version }}
          - postgresql-client-{{ postgres_apt_version }}
          - postgresql-server-dev-{{ postgres_apt_version }}
          # - postgresql-contrib-{{ postgres_apt_version }}
        state: present
        update_cache: yes

    - name: Install required packages for Apache AGE
      ansible.builtin.apt:
        name:
          - build-essential
          - libreadline-dev
          - zlib1g-dev
          - flex
          - bison
        state: present
        update_cache: yes

    - name: Clone Apache AGE repository from branch {{ apache_age_git_version }}
      ansible.builtin.git:
        repo: https://github.com/apache/age.git
        dest: /tmp/age
        version: "{{ apache_age_git_version }}"

    - name: Check if Apache AGE is installed
      ansible.builtin.stat:
        path: /usr/share/postgresql/15/extension/age.control
      register: age

    - name: Install Apache AGE 
      ansible.builtin.shell: make install
      args:
        chdir: /tmp/age
      when: not age.stat.exists

    - name: Install openjdk-11-jre-headless
      ansible.builtin.apt:
        name: openjdk-11-jre-headless
        state: present
        update_cache: yes
# End: Provide Software


# Begin: POSTGRES CONFIGURATION
- name: POSTGRES CONFIGURATION
  hosts: all
  gather_facts: false
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Set `statement_timeout` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?statement_timeout'
        line: 'statement_timeout = {{ statement_timeout | default("0") }}'
        state: present

    - name: Set `shared_buffers` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?shared_buffers'
        line: 'shared_buffers = {{ shared_buffers | default("128MB") }}'
        state: present
      when: shared_buffers is defined

    - name: Set `effective_cache_size` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?effective_cache_size'
        line: 'effective_cache_size = {{ effective_cache_size | default("4GB") }}'
        state: present
      when: effective_cache_size is defined

    - name: Set `max_connections` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_connections'
        line: 'max_connections = {{ max_connections | default("100") }}'
        state: present
      when: max_connections is defined

    - name: Set `work_mem` 
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?work_mem'
        line: 'work_mem = {{ work_mem | default("4MB") }}'
        state: present
      when: work_mem is defined
    
    - name: Set `maintenance_work_mem`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?maintenance_work_mem'
        line: 'maintenance_work_mem = {{ maintenance_work_mem | default("64MB") }}'
        state: present
      when: maintenance_work_mem is defined
    
    - name: Set `checkpoint_completion_target`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?checkpoint_completion_target'
        line: 'checkpoint_completion_target = {{ checkpoint_completion_target | default("0.9") }}'
        state: present
      when: checkpoint_completion_target is defined

    - name: Set `wal_buffers`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?wal_buffers'
        line: 'wal_buffers = {{ wal_buffers | default("-1") }}' 
        state: present
      when: wal_buffers is defined
    
    - name: Set `default_statistics_target`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?default_statistics_target'
        line: 'default_statistics_target = {{ default_statistics_target | default("100") }}'
        state: present
      when: default_statistics_target is defined
    
    - name: Set `random_page_cost`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?random_page_cost'
        line: 'random_page_cost = {{ random_page_cost | default("4.0") }}'
        state: present
      when: random_page_cost is defined

    - name: Set `effective_io_concurrency`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?effective_io_concurrency'
        line: 'effective_io_concurrency = {{ effective_io_concurrency | default("1") }}'
        state: present
      when: effective_io_concurrency is defined
    
    - name: Set `huge_pages`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?huge_pages'
        line: 'huge_pages = {{ huge_pages | default("try") }}'
        state: present
      when: huge_pages is defined

    - name: Set `min_wal_size`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?min_wal_size'
        line: 'min_wal_size = {{ min_wal_size | default("80MB") }}'
        state: present
      when: min_wal_size is defined
    
    - name: Set `max_wal_size`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_wal_size'
        line: 'max_wal_size = {{ max_wal_size | default("1GB") }}'
        state: present
      when: max_wal_size is defined

    - name: Set `max_worker_processes`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_worker_processes'
        line: 'max_worker_processes = {{ max_worker_processes | default("4") }}'
        state: present
      when: max_worker_processes is defined
    
    - name: Set `max_parallel_workers_per_gather`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_parallel_workers_per_gather'
        line: 'max_parallel_workers_per_gather = {{ max_parallel_workers_per_gather | default("2") }}'
        state: present
      when: max_parallel_workers_per_gather is defined

    - name: Set `max_parallel_workers`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_parallel_workers'
        line: 'max_parallel_workers = {{ max_parallel_workers | default("8") }}'
        state: present
      when: max_parallel_workers is defined

    - name: Set `max_parallel_maintenance_workers`
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regex: '^#?max_parallel_maintenance_workers'
        line: 'max_parallel_maintenance_workers = {{ max_parallel_maintenance_workers | default("2") }}'
        state: present
      when: max_parallel_maintenance_workers is defined

    - name: Restart Service Postgres
      ansible.builtin.service:
        name: postgresql
        state: restarted

    - name: Wait for Postgres to restart
      ansible.builtin.wait_for:
        port: 5432
        delay: 5
        timeout: 300
# End: POSTGRES CONFIGURATION


# Begin: RAPSQLBench
- name: RAPSQLBENCH
  hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Perform RAPSQLBench 
      ansible.builtin.shell: 
        cmd: ./rapsqlbench.sh -g {{ graph_name }} -l {{ rdf2pg_model }} -r {{ rapsql_transpiler }} -t {{ triples }} -m {{ memory }} -c {{ cores }} -i {{ iterations }}
        chdir: /tmp/benchmark    
      when: perform_benchmark
    
    - name: Copy provided `config.yml` to `measurement` dir
      ansible.builtin.copy:
        src: /tmp/config.yml
        dest: /tmp/benchmark/measurement/{{ graph_name }}/config.yml
        remote_src: true
        force: yes
      become: true 
      become_user: root

    - name: Copy `postgresql.conf` to `measurement` dir
      ansible.builtin.copy:
        src: /etc/postgresql/15/main/postgresql.conf
        dest: /tmp/benchmark/measurement/{{ graph_name }}/postgresql.conf
        remote_src: true
        force: yes
      become: true 
      become_user: root
# End: RAPSQLBench

# Start: Fetch Results
- name: FETCH RESULTS
  hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Synchronize measurement from remote
      ansible.posix.synchronize:
        src: /tmp/benchmark/measurement/
        dest: ../results/measurement
        mode: pull
        delete: no
      when: fetch_measurement 

    - name: Synchronize queries from remote
      ansible.posix.synchronize:
        src: /tmp/benchmark/queries/cypher/
        dest: ../results/queries
        mode: pull
        delete: no
      when: fetch_queries
    
    - name: Synchronize data from remote
      ansible.posix.synchronize:
        src: /tmp/benchmark/data/
        dest: ../results/data
        mode: pull
        delete: no
      when: fetch_data
# End: Fetch Results